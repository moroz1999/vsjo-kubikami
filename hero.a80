    module  hero
hero_color1         equ %01111101
hero_color2         equ %00000111
hero_color          db  hero_color1

hero_coords
hero_y              db  15
hero_x              db  9
hero_timer          db  0
hero_delay          db  1

state_void          equ 0
state_ground        equ 1
state_jump          equ 2

hero_state          db  state_ground

jump_step           db  0

jump_type_top       equ 0
jump_type_left      equ 1
jump_type_right     equ 2
jump_steps          equ 8

jump_type           db  jump_type_top
no_item_in_pocket   equ 255
current_item        db  no_item_in_pocket

switch_colors
                    ld  a,(hero_color)
                    cp  hero_color1
                    jr  z,switch_colors_use2
                    ld  a,hero_color1
                    ld  (hero_color),a
                    ret
switch_colors_use2
                    ld  a,hero_color2
                    ld  (hero_color),a
                    ret
hero_jump
                    ld  a,(hero_state)
                    cp  state_jump
                    ret nz

                    ld  a,(jump_type)
                    cp  jump_type_right
                    jr  z,jump_process_right

                    cp  jump_type_left
                    jr  z,jump_process_left

                    jr  jump_process_top
jump_process_top
                    ld  a,(jump_step)
                    cp  6
                    call    nc,move_hero_up
                    ld  a,(jump_step)
                    cp  4
                    call    c,move_hero_down
                    jr  jump_process_dec
jump_process_left
                    ld  a,(jump_step)
                    cp  8
                    jr  z,jump_process_left1
                    cp  6
                    jr  nc,jump_process_left2
                    cp  3
                    jr  nc,jump_process_left3
                    cp  1
                    jr  nc,jump_process_left4
                    jr  jump_process_left5
jump_process_left1
                    call    move_hero_up
                    jr  jump_process_dec
jump_process_left2
                    call    move_hero_up
                    call    move_hero_left
                    jr  jump_process_dec
jump_process_left3
                    call    move_hero_left
                    jr  jump_process_dec
jump_process_left4
                    call    move_hero_down
                    call    move_hero_left
                    jr  jump_process_dec
jump_process_left5
                    call    move_hero_down
                    jr  jump_process_dec
jump_process_right
                    ld  a,(jump_step)
                    cp  8
                    jr  z,jump_process_right1
                    cp  6
                    jr  nc,jump_process_right2
                    cp  3
                    jr  nc,jump_process_right3
                    cp  1
                    jr  nc,jump_process_right4
                    jr  jump_process_right5
jump_process_right1
                    call    move_hero_up
                    jr  jump_process_dec
jump_process_right2
                    call    move_hero_up
                    call    move_hero_right
                    jr  jump_process_dec
jump_process_right3
                    call    move_hero_right
                    jr  jump_process_dec
jump_process_right4
                    call    move_hero_down
                    call    move_hero_right
                    jr  jump_process_dec
jump_process_right5
                    call    move_hero_down
                    jr  jump_process_dec

jump_process_dec
                    ld  a,(jump_step)
                    dec a
                    jr  z,hero_jump_stop
                    ld  (jump_step),a
                    ret
hero_jump_stop
                    xor a ; state_void
                    ld  (jump_step),a
                    ld  (hero_state),a
                    ret
hero_move
                    ld  a,(hero_timer)
                    or  a
                    jr  z,hero_move2
                    dec a
                    ld  (hero_timer),a
                    ret
hero_move2
                    call    hero_jump


                ; only move if standing on ground
                    ld  a,(hero_state)
                    cp  state_ground
                    ret nz

                    call    game_process.keyboard
                    ld  a,(hero_delay)
                    ld  (hero_timer),a
                    ret
hero_jump_top
                    ld  a,(hero_state)
                    cp  state_ground
                    ret nz

                    ld  a,jump_type_top
                    ld  (jump_type),a

                    ld  a,jump_steps
                    ld  (jump_step),a

                    ld  a,state_jump
                    ld  (hero_state),a

                    ret
hero_jump_right
                    ld  a,(hero_state)
                    cp  state_ground
                    ret nz

                    ld  a,jump_type_right
                    ld  (jump_type),a

                    ld  a,jump_steps
                    ld  (jump_step),a

                    ld  a,state_jump
                    ld  (hero_state),a

                    ret
hero_jump_left
                    ld  a,(hero_state)
                    cp  state_ground
                    ret nz

                    ld  a,jump_type_left
                    ld  (jump_type),a

                    ld  a,jump_steps
                    ld  (jump_step),a

                    ld  a,state_jump
                    ld  (hero_state),a

                    ret
move_hero_up
                    ld  de,(hero_coords)
                    dec e
                    call    check_hero_coords
                    or  a
                    ret z

                    ld  (hero_coords),de
                    xor a
                    ld  (draw.restore),a
                    ret
move_hero_down
                    ld  de,(hero_coords)
                    inc e

                    call    check_hero_coords
                    or  a
                    jr  z,move_hero_down_stand

                    ld  (hero_coords),de
                    xor a
                    ld  (draw.restore),a
                    ret
move_hero_down_stand
                    ld  a,state_ground
                    ld  (hero_state),a
                    ret
move_hero_left
                    ld  de,(hero_coords)
                    dec d
                    call    check_hero_coords
                    or  a
                    ret z

                    ld  (hero_coords),de
                    xor a
                    ld  (draw.restore),a
                    ret
move_hero_right
                    ld  de,(hero_coords)
                    inc d
                    call    check_hero_coords
                    or  a
                    ret z

                    ld  (hero_coords),de
                    xor a
                    ld  (draw.restore),a
                    ret
fire_pressed
                    call    use_current_item
                    or  a
                    ; if a is not 0, then item was used, skip pickup/drop
                    ret nz

                    ld  de,(hero_coords)
                    call    rooms.find_item_by_coord
                    cp  rooms.item_not_found
                    jr  z,hero.fire_pressed_noitem
fire_pressed_item
                    ld  c,a

                    ld  a,(current_item)
                    ld  b,a
                    cp  no_item_in_pocket
                    jr  z,fire_pressed_empty_pick
                    push    bc
                    ld  a,b
                    call    drop_item
                    pop bc
                    ld  a,c
                    call    pickup_item
                    ret
fire_pressed_empty_pick
                    ld  a,c
                    call    pickup_item
                    ret
fire_pressed_noitem
                    ld  a,(current_item)
                    cp  no_item_in_pocket
                    ret z
                    call    drop_item

                    ret
use_current_item
            ; output
            ; a - 0 if no item was used
            ; a - 255 if item used
                    ld  a,(current_item)
                    cp  no_item_in_pocket
                    jr  nz,use_current_item2
                ; no item in pocket, return 0
                    xor a
                    ret
use_current_item2
                    call    items.call_item_logic
                    ret
pickup_item
                    ld  (current_item),a
                    call    rooms.remove_item

                    ld  a,(current_item)
                    call    items.print_item_name
                    ret

drop_item
                    ld  a,(hero_x)
                    ld  b,a
                    ld  a,(hero_y)
                    ld  c,a
                    ld  a,(current_item)
                    call    rooms.spawn_item

                    ld  a,no_item_in_pocket
                    ld  (current_item),a

                    call    game_ui.erase_item_name
                    ret
save_restore
                    ld  a,(hero_x)
                    ld  (draw.restore_x),a

                    ld  a,(hero_y)
                    ld  (draw.restore_y),a
                    ret
check_hero_coords
                ; input:
                ; d - x 
                ; e - y
                ; output:
                ; b = 0 (forbidden)
                ; b = 1 (allowed)
                    push    de
                    ld  b,0
                    ld  a,d
                ; check screen left 
                    cp  255
                    jr  z,check_hero_left_room
                ; check screen right
                    cp  rooms.room_w
                    jr  z,check_hero_right_room

                    ld  a,e
                ; check screen top 
                    cp  255
                    jr  z,check_hero_top_room
                ; check screen bottom
                    cp  rooms.room_h
                    jr  z,check_hero_bottom_room

                    call    rooms.get_room_color
check_hero_coords_black
                    cp  rooms.room_bg_color1
                    jr  z,check_hero_coords_yes
check_hero_coords_blue1
                    cp  rooms.room_bg_color2
                    jr  z,check_hero_coords_yes
check_hero_coords_no
                    pop de
                    xor a
                    ret
check_hero_coords_yes
                    pop de
check_hero_coords_yes2
                    ld  a,1
                    ret
check_hero_left_room
                    pop af
                    push    de
                    call    rooms.set_left_room
                    pop de
                    ld  d,rooms.room_w-1
                    jr  check_hero_coords_yes2

check_hero_right_room
                    pop af
                    push    de
                    call    rooms.set_right_room
                    pop de
                    ld  d,0
                    jr  check_hero_coords_yes2

check_hero_top_room
                    pop af
                    push    de
                    call    rooms.set_top_room
                    pop de
                    ld  e,0
                    jr  check_hero_coords_yes2

check_hero_bottom_room
                    pop af
                    push    de
                    call    rooms.set_bottom_room
                    pop de
                    ld  e,0
                    jr  check_hero_coords_yes2
hero_gravity
                    ld  a,(hero_state)
                    cp  state_jump
                    ret z
                    call    move_hero_down
                    ret

    endmodule