                        module	hero
hero_color1                 equ	%01111101
hero_color2                 equ	%00000111
hero_color                  db	hero_color1,hero_color2

hero_coords
hero_y                      db	16
hero_x                      db	10
hero_global_y               db	3
hero_timer                  db	0
hero_delay                  db	2
hero_delay_ground           equ	2
hero_delay_swim             equ	4
swam_up                     db	0

state_void                  equ	%00000001
state_ground                equ	%00000010
state_swim                  equ	%00000100
state_jump                  equ	%00001000

gravity_air                 equ	1
gravity_water               equ	15

state_movable               equ	state_swim|state_ground

hero_state                  db	state_ground

jump_step                   db	0

jump_type_top               equ	0
jump_type_left              equ	1
jump_type_right             equ	2
jump_steps                  equ	8

jump_type                   db	jump_type_top
no_item_in_pocket           equ	255
current_item                db	no_item_in_pocket
draw_hero
                            ld	a,(hero_x)
                            ld  d,a
                            ld	a,(hero_y)
                            ld  e,a
                            ld	hl,hero_color
                            call	draw.draw_gigapoint
                            ret
update_global_y
                        ; y = hero_room_y * each_room_height + room y

                            ld	a,(rooms.room_number_y)

                            ld	h,a
                            ld	e,rooms.room_h

                            call	math.mul8b
                        ; l now has top rooms offset, now add local y
                            ld	a,(hero_y)
                            add	l
                            ld	(hero_global_y),a
                            ret
hero_jump
                            ld	a,(hero_state)
                            cp	state_jump
                            ret	nz

                            ld	a,(jump_type)
                            cp	jump_type_right
                            jr	z,jump_process_right

                            cp	jump_type_left
                            jr	z,jump_process_left

                            jr	jump_process_top
jump_process_top
                            ld	a,(jump_step)
                            cp	6
                            call	nc,move_hero_up
                            ld	a,(jump_step)
                            cp	4
                            call	c,move_hero_down
                            jr	jump_process_dec
jump_process_left
                            ld	a,(jump_step)
                            cp	8
                            jr	z,jump_process_left1
                            cp	6
                            jr	nc,jump_process_left2
                            cp	3
                            jr	nc,jump_process_left3
                            cp	1
                            jr	nc,jump_process_left4
                            jr	jump_process_left5
jump_process_left1
                            call	move_hero_up
                            jr	jump_process_dec
jump_process_left2
                            call	move_hero_up
                            call	move_hero_left
                            jr	jump_process_dec
jump_process_left3
                            call	move_hero_left
                            jr	jump_process_dec
jump_process_left4
                            call	move_hero_down
                            call	move_hero_left
                            jr	jump_process_dec
jump_process_left5
                            call	move_hero_down
                            jr	jump_process_dec
jump_process_right
                            ld	a,(jump_step)
                            cp	8
                            jr	z,jump_process_right1
                            cp	6
                            jr	nc,jump_process_right2
                            cp	3
                            jr	nc,jump_process_right3
                            cp	1
                            jr	nc,jump_process_right4
                            jr	jump_process_right5
jump_process_right1
                            call	move_hero_up
                            jr	jump_process_dec
jump_process_right2
                            call	move_hero_up
                            call	move_hero_right
                            jr	jump_process_dec
jump_process_right3
                            call	move_hero_right
                            jr	jump_process_dec
jump_process_right4
                            call	move_hero_down
                            call	move_hero_right
                            jr	jump_process_dec
jump_process_right5
                            call	move_hero_down
                            jr	jump_process_dec

jump_process_dec
                            ld	a,(jump_step)
                            dec	a
                            jr	z,hero_jump_stop
                            ld	(jump_step),a
                            ret
hero_jump_stop
                            ld	a,state_void
                            ld	(jump_step),a
                            ld	(hero_state),a
                            ret
hero_move
                            ld	a,(hero_timer)
                            or	a
                            jr	z,hero_move2
                            dec	a
                            ld	(hero_timer),a
                            ret
hero_move2
                            call	hero_jump

                            ld	a,(hero_state)
                            and	state_movable
                            ret	z

                            call	keyboard.query
                            ld	a,(hero_delay)
                            ld	(hero_timer),a
                            ret

hero_jump_top
                            ld	a,(hero_state)
                            and	state_movable
                            ret	z

                            ld	a,jump_type_top
                            ld	(jump_type),a

                            ld	a,jump_steps
                            ld	(jump_step),a

                            ld	a,state_jump
                            ld	(hero_state),a

                            ret
hero_jump_right
                            ld	a,(hero_state)
                            and	state_movable
                            ret	z

                            ld	a,jump_type_right
                            ld	(jump_type),a

                            ld	a,jump_steps
                            ld	(jump_step),a

                            ld	a,state_jump
                            ld	(hero_state),a

                            ret
hero_jump_left
                            ld	a,(hero_state)
                            and	state_movable
                            ret	z

                            ld	a,jump_type_left
                            ld	(jump_type),a

                            ld	a,jump_steps
                            ld	(jump_step),a

                            ld	a,state_jump
                            ld	(hero_state),a

                            ret
move_hero_up
                            ld	de,(hero_coords)
                            dec	e
                            call	objects.check_coords
                            or	a
                            ret	z
                            cp	objects.b_top
                            call	z,hero_top

                            ld	(hero_coords),de
                            call	hero.save_restore

                            ret
move_hero_down
                            ld	a,(hero_elevator)
                            cp	elevators.item_on_elevator
                            jr	z,move_hero_down_stand
move_hero_down_force
                            ld	de,(hero_coords)
                            inc	e

                            call	objects.check_coords
                            or	a
                            jr	z,move_hero_down_stand

                            cp	objects.b_bottom
                            call	z,hero_bottom

                            ld	(hero_coords),de
                            call	hero.save_restore

                            ret
move_hero_down_stand
                            call	hero.save_restore
                            ret
move_hero_left
                            ld	de,(hero_coords)
                            dec	d
                            call	objects.check_coords
                            or	a
                            ret	z
                            cp	objects.b_left

                            call	z,hero_left
move_hero_left2
                            ld	(hero_coords),de
                            call	hero.save_restore
                            ret
move_hero_right
                            ld	de,(hero_coords)
                            inc	d
                            call	objects.check_coords
                            or	a
                            ret	z
                            cp	objects.b_right
                            call	z,hero_right

                            ld	(hero_coords),de
                            call	hero.save_restore
                            ret
hero_left
                            push	de
                            call	rooms.set_left_room
                            pop	de
                            ld	d,rooms.room_w-1
                            ret
hero_right
                            push	de
                            call	rooms.set_right_room
                            pop	de
                            ld	d,0
                            ret
hero_top
                            push	de
                            call	rooms.set_top_room
                            pop	de
                            ld	e,rooms.room_h-1
                            ret
hero_bottom
                            push	de
                            call	rooms.set_bottom_room
                            pop	de
                            ld	e,0
                            ret
fire_pressed
                            call	use_current_item
                            or	a
                    ; if a is not 0, then item was used, skip pickup/drop
                            ret	nz

                            ld	de,(hero_coords)
                            call	rooms.find_item_by_coord
                            cp	rooms.item_not_found
                            jr	z,hero.fire_pressed_noitem
fire_pressed_item
                            ld	c,a

                            ld	a,(current_item)
                            ld	b,a
                            cp	no_item_in_pocket
                            jr	z,fire_pressed_empty_pick
                            push	bc
                            ld	a,b
                            call	drop_item
                            pop	bc
                            ld	a,c
                            call	pickup_item
                            ret
fire_pressed_empty_pick
                            ld	a,c
                            call	pickup_item
                            ret
fire_pressed_noitem
                            ld	a,(current_item)
                            cp	no_item_in_pocket
                            ret	z
                            call	drop_item

                            ret
use_current_item
            ; output
            ; a - 0 if no item was used
            ; a - 255 if item used
                            ld	a,(current_item)
                            cp	no_item_in_pocket
                            jr	nz,use_current_item2
                ; no item in pocket, return 0
                            xor	a
                            ret
use_current_item2
                            call	items.call_item_logic
                            ret
pickup_item
                            ld	(current_item),a
                            call	rooms.remove_item
                            ld	a,(current_item)
                            call	items.remove_item

                            ld	a,(current_item)
                            call	items.print_item_name
                            ret
delete_item_in_pocket
                            ld	a,no_item_in_pocket
                            ld	(current_item),a

                            call	game_ui.erase_item_name

                            ret
drop_item
                            ld	a,(hero_x)
                            ld	b,a
                            ld	a,(hero_y)
                            ld	c,a
                            ld	a,(current_item)
                            call	rooms.spawn_item

                            call	delete_item_in_pocket
                            ret
save_restore
                            ld	a,(hero_x)
                            ld	d,a

                            ld	a,(hero_y)
                            ld	e,a
                            call	draw.add_to_restore
                            ret
hero_gravity
                            ld	a,(hero_state)
                            cp	state_jump
                            ret	z

                            ld	a,(swam_up)
                            or	a
                            jr	z,hero_gravity2
                            xor	a
                            ld	(swam_up),a
                            ld	a,(gravity_delay)
                            ld	(gravity_timer),a
                            ret
hero_gravity2
                            ld	a,(gravity_timer)
                            or	a
                            jr	z,hero_gravity_do
                            dec	a
                            ld	(gravity_timer),a
                            ret
hero_gravity_do
                            ld	a,(gravity_delay)
                            ld	(gravity_timer),a
                            call	move_hero_down
                            ret
gravity_timer
                            db	0
gravity_delay
                            db	0
check_hero_state
                ; if hero is jumping, skip checks
                            ld	a,(hero_state)
                            cp	state_jump
                            ret	z

                            ld	de,(hero_coords)

                            call	rooms.get_room_color
                            cp	rooms.room_bg_color_wat
                            jr	nz,check_hero_elevator
                ; hero is swimming
                            ld	a,state_swim
                            ld	(hero_state),a

                            ld	a,gravity_water
                            ld	(gravity_delay),a

                            ld	a,hero_delay_swim
                            ld	(hero_delay),a
                            ret
check_hero_elevator
                ; check if hero is on any elevator
                            ld	a,(hero_elevator)
                            cp	elevators.item_on_elevator
                            jr	z,check_hero_state_stand

check_hero_state_ground
                ; check whats below hero
                            ld	de,(hero_coords)
                            inc	e

                            call	rooms.get_room_color
                ; below is empty space
                            cp	rooms.room_bg_color
                            jr	z,check_hero_state_falling
                ; below is empty gray space
                            cp	rooms.room_bg_color_gray
                            jr	z,check_hero_state_falling
                ; below is empty sky
                            cp	rooms.room_bg_color_sky
                            jr	z,check_hero_state_falling
                ; if not empty room or sky then hero is standing on ground
check_hero_state_stand
                            ld	a,state_ground
                            ld	(hero_state),a

                            ld	a,gravity_air
                            ld	(gravity_delay),a

                            ld	a,hero_delay_ground
                            ld	(hero_delay),a
                            ret
check_hero_state_falling
                            ld	a,state_void
                            ld	(hero_state),a

                            ld	a,gravity_air
                            ld	(gravity_delay),a

                            ret
check_elevator
                            ld	a,(hero_x)
                            ld	d,a

                            ld	a,(hero_global_y)
                            ld	e,a
                            call	elevators_itemcheck.check

                            ld	(hero_elevator),a
                            ld	(current_elevator),ix
                            ret
hero_elevator
                            db	elevators.item_not_elevator
current_elevator
                            dw	0

                        endmodule