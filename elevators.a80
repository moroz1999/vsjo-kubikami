    module  elevators
state_stop          equ 0
state_up            equ 1
state_down          equ 2
end_marker          equ #ff
amount              equ 3
elevator_top_color  equ %01000111
    struct  elevator
room_x              byte
room_y              byte
room_pos_x          byte
room_pos_y          byte
width               byte
cur_height          byte
end_height          byte
state               byte
delay               byte
timer               byte
    ends
                    display "elevators_update ",elevators_update
elevators_update
                    ld  hl,rooms.room_elevators_buf
elevators_update_next
                    ld  a,(hl)
                ; check if there are no elevators
                    cp  rooms.rooms_end_marker
                    ret z

                    ld  ixl,a
                    inc hl

                    ld  a,(hl)
                    ld  ixh,a
                    inc hl
                    push    hl
                ; ix now has elevator data start

                    ld  a,(ix+elevator.timer)
                    or  a
                    jr  z,elevator_move_allow
                    dec a
                    ld  (ix+elevator.timer),a
                    jr  elevator_move_end
elevator_move_allow
                    ld  a,(ix+elevator.delay)
                    ld  (ix+elevator.timer),a

                    ld  a,(ix+elevator.state)
                    cp  state_down
                    jr  z,elevator_move_down

                    cp  state_up
                    jr  nz,elevator_move_end
elevator_move_up
                    ld  a,(ix+elevator.end_height)
                    ld  b,a

                    ld  a,(ix+elevator.cur_height)
                    cp  b

                    jr  z,elevator_switch_down
                    inc a
                    ld  (ix+elevator.cur_height),a
                    jr  elevator_move_end
elevator_switch_down
                    ld  a,state_down
                    ld  (ix+elevator.state),a
                    jr  elevator_move_end
elevator_move_down
                    ld  a,(ix+elevator.cur_height)
                    or  a

                    jr  z,elevator_switch_up
                    dec a
                    ld  (ix+elevator.cur_height),a
                    jr  elevator_move_end
elevator_switch_up
                    ld  a,state_up
                    ld  (ix+elevator.state),a
                    jr  elevator_move_end
elevator_move_end
                    pop hl
                    jr  elevators_update_next
                    ret


draw_current
                    ld  hl,rooms.room_elevators_buf
draw_next
                    ld  a,(hl)
                ; check if there are no elevators
                    cp  rooms.rooms_end_marker
                    ret z
                    ld  a,(hl)

                    ld  ixl,a
                    inc hl

                    ld  a,(hl)
                    ld  ixh,a
                    inc hl
                    push    hl
                ; ix now has elevator data start

                    ld  a,(ix+elevator.room_pos_x)
                    ld  d,a

                    ld  a,(ix+elevator.room_pos_y)
                    ld  e,a

                    ld  a,(ix+elevator.width)
                    ld  b,a

                    ld  a,(ix+elevator.cur_height)
                    ld  c,a

                    push    ix
                    call    draw_elevator
                    pop ix
                    pop hl
                    jr  draw_next
                    ret
draw_elevator
                ; d - elevator start x
                ; e - elevator start y
                ; b - width
                ; c - height

                ; get left top address of elevator in current room
                    ld  a,e
                    sub c
                    ld  e,a

                    push    bc
                    call    screen_utils.get_attrs_address
                    pop bc

                    ld  a,elevator_top_color
draw_elevator_pixel
                    ld  (hl),a
                    inc hl
                    djnz    draw_elevator_pixel

                    ret
                    display "elevator_4_1_1 ",elevator_4_1_1
                    display "elevator_4_1_2 ",elevator_4_1_2
                    display "elevator_4_1_3 ",elevator_4_1_3
elevators_table
                    dw  elevator_4_1_1
                    dw  elevator_4_1_2
                    dw  elevator_4_1_3
elevator_4_1_1
                    elevator    {
                    4,
                    1,
                    2,
                    20,
                    7,
                    0
                    13,
                    state_up,
                    2,
                    0
                    }
elevator_4_1_2
                    elevator    {
                    4,
                    1,
                    9,
                    20,
                    8,
                    0
                    13,
                    state_up,
                    2,
                    0
                    }
elevator_4_1_3
                    elevator    {
                    4,
                    1,
                    22,
                    20,
                    7,
                    13
                    13,
                    state_up,
                    1,
                    0
                    }
    endmodule