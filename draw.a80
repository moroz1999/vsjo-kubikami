                        module	draw
border_color                equ	0
restore                     db	255
restore_x                   db	255
restore_y                   db	255
border
                            out	#fe,a
                            ret
draw_panel
                            ld	d,0
                            ld	e,rooms.room_h
                            call	screen_utils.get_attrs_address
                            push	hl
                            pop	de
                            inc	de
                            ld	a,%01000111
                            ld	(hl),a
                            ld	bc,rooms.room_w*2
                            ldir
                            ret
draw_pattern
                            ld	hl,screen_utils.screen
                            ld	b,rooms.room_h*8/2
draw_pattern_2rows
                            push	bc
                            push	hl
                            push	hl
                            pop	de
                            inc	de

                            ld	a,%01010101
                            ld	bc,screen_utils.screen_w-1
                            ld	(hl),a
                            ldir

                            pop	hl
                            call	down_hl
                            push	hl
                            push	hl
                            pop	de
                            inc	de

                            ld	a,%10101010
                            ld	(hl),a
                            ld	bc,screen_utils.screen_w-1
                            ldir
                            pop	hl
                            call	down_hl
                            pop	bc
                            djnz	draw_pattern_2rows
                            ret

                            display	'draw_gigapoint,',draw_gigapoint
draw_gigapoint
                        ; input 
                        ; d - x
                        ; e - y
                        ; hl - points to first color of two
                            ld	a,(color_shift)
                            ld	c,a
                            ld	b,0
                            add	hl,bc
                            push	hl
                            call	screen_utils.get_attrs_address
                            pop	de
                            ld	a,(de)
                            ld	(hl),a

                            ret
color_shift                 db	0
switch_colors
                            ld	a,(color_shift)
                            xor	1
                            ld	(color_shift),a
                            ret
draw_state
                            ld	a,4
                            call	draw.border
                            call	restore_pixels

                            ld	a,3
                            call	draw.border
                            call	waterdrops.draw_room_waterdrops

                            ld	a,5
                            call	draw.border
                            call	elevators_draw.draw

                            ld	a,6
                            call	draw.border
                            call	draw_room_items

                            ld	a,7
                            call	draw.border
                            call	teleports.draw_current

                            ld	a,1
                            call	draw.border
                            call	hero.draw_hero


                            ret
restore_rectangle
                ; input:
                ; d - x
                ; e - y
                ; b - width
                ; c - height
                            push	bc

                            push	de
                            call	rooms.get_current_room_pixel_address
                            pop	de
                            push	hl
                            call	screen_utils.get_attrs_address
                            ex	hl,de
                ; de now has screen address                    
                            pop	hl
                ; hl now has room pixel address
                            pop	bc
restore_rec_row
                            push	de
                            push	hl
                            push	bc
                ; bc now has restored w/h
restore_rec_pixel
                            ld	a,(hl)
                            ld	(de),a
                            inc	hl
                            inc	de
                            djnz	restore_rec_pixel

                            pop	bc
                            pop	hl
                            ld	de,rooms.room_w
                            add	hl,de

                            pop	de
                            push	hl
                            ld	hl,rooms.room_w
                            add	hl,de
                            ex	hl,de
                            pop	hl

                            dec	c
                            jr	nz,restore_rec_row
                            ret
add_to_restore
                ; add point to list of restoration points
                ; d - x coord
                ; e - y coord
                ; output:
                ; de - original values
                            ld	hl,(restore_buffer_cur)
                ; hl now points to buffer end

                            ld	(hl),d
                            inc	hl
                            ld	(hl),e
                            inc	hl
                            ld	(restore_buffer_cur),hl
                ; increase buffer length
                            ld	hl,restore_length
                            inc	(hl)
                            ret
restore_length              db	0
restore_buffer              ds	80
restore_buffer_cur          dw	restore_buffer
restore_pixels
                            ld	a,(restore_length)
                            or	a
                            ret	z
                            ld	b,a

                            ld	hl,restore_buffer
                            ld	(restore_buffer_cur),hl
restore_pixels2
                            push	bc
                ; read coords of point
                            ld	d,(hl)
                            inc	hl
                            ld	e,(hl)
                            inc	hl

                            push	hl

                            call	restore_pixel

                            pop	hl
                            pop	bc
                            djnz	restore_pixels2
                            ld	a,0
                            ld	(restore_length),a

                            ret
restore_pixel
                ; restores one pixel in screen texture based on current room address
                ; input
                ; d - x coord
                ; e - y coord
                            call	screen_utils.get_texture_address
                            ld	b,h
                            ld	c,l
                            ld	hl,(rooms.current_room_address)
                            add	hl,bc
                            ld	a,(hl)
                            ld	hl,screen_utils.attrs
                            add	hl,bc
                            ld	(hl),a
                            ret
clear_screen
                            ld	hl,screen_utils.attrs
                            ld	de,screen_utils.attrs+1
                            ld	bc,screen_utils.attrs_size-1
                            ldir
                            ret
draw_room_items
                            ld	hl,rooms.room_items_buffer
draw_room_items_next
                            ld	a,(hl)
                            inc	hl

                            cp	rooms.rooms_end_marker
                            ret	z


                            ld	a,(hl)
                            inc	hl
                            ld	d,a

                            ld	a,(hl)
                            inc	hl
                            ld	e,a
                            push	hl
                            ld	hl,items.item_color
                            call	draw.draw_gigapoint

                            pop	hl
                            jr	draw_room_items_next
draw_room_sprite
        ;   input
        ;   hl - sprite address
        ;   de - room address        
        ;   b - sprite width
        ;   c - sprite height
        ;
        ;   output
        ;   hl - sprite address end
draw_room_sprite_row
                            push	de
                            push	bc
draw_room_sprite_byte
                            ld	a,(hl)
                            inc	hl
                            ld	(de),a
                            inc	de
                            djnz	draw_room_sprite_byte
                            pop	bc
                            pop	de

                            push	hl
                            ld	hl,rooms.room_w
                            add	hl,de
                            ex	hl,de
                            pop	hl

                            dec	c
                            jr	nz,draw_room_sprite_row
                            ret
                        ifused	down_hl
down_hl
                            inc	h
                            ld	a,h
                            and	7
                            ret	nz
                            ld	a,l
                            sub	-32
                            ld	l,a
                            sbc	a,a
                            and	#f8
                            add	a,h
                            ld	h,a
                            ret
                        endif
                        endmodule